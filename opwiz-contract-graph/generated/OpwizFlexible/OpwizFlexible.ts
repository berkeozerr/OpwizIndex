// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Exercise extends ethereum.Event {
  get params(): Exercise__Params {
    return new Exercise__Params(this);
  }
}

export class Exercise__Params {
  _event: Exercise;

  constructor(event: Exercise) {
    this._event = event;
  }

  get participator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Listed extends ethereum.Event {
  get params(): Listed__Params {
    return new Listed__Params(this);
  }
}

export class Listed__Params {
  _event: Listed;

  constructor(event: Listed) {
    this._event = event;
  }

  get optionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isListed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Offer extends ethereum.Event {
  get params(): Offer__Params {
    return new Offer__Params(this);
  }
}

export class Offer__Params {
  _event: Offer;

  constructor(event: Offer) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get setted(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Participate extends ethereum.Event {
  get params(): Participate__Params {
    return new Participate__Params(this);
  }
}

export class Participate__Params {
  _event: Participate;

  constructor(event: Participate) {
    this._event = event;
  }

  get participator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawCA extends ethereum.Event {
  get params(): WithdrawCA__Params {
    return new WithdrawCA__Params(this);
  }
}

export class WithdrawCA__Params {
  _event: WithdrawCA;

  constructor(event: WithdrawCA) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawColleteral extends ethereum.Event {
  get params(): WithdrawColleteral__Params {
    return new WithdrawColleteral__Params(this);
  }
}

export class WithdrawColleteral__Params {
  _event: WithdrawColleteral;

  constructor(event: WithdrawColleteral) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawPremium extends ethereum.Event {
  get params(): WithdrawPremium__Params {
    return new WithdrawPremium__Params(this);
  }
}

export class WithdrawPremium__Params {
  _event: WithdrawPremium;

  constructor(event: WithdrawPremium) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get optionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OpwizFlexible__optionDetailsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;
  value9: boolean;
  value10: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32,
    value9: boolean,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getListAsset(): Address {
    return this.value0;
  }

  getIndexOfListAsset(): BigInt {
    return this.value1;
  }

  getOfferEnd(): BigInt {
    return this.value2;
  }

  getOptionExpiry(): BigInt {
    return this.value3;
  }

  getListAmount(): BigInt {
    return this.value4;
  }

  getColleteralType(): i32 {
    return this.value5;
  }

  getCounterAssetType(): i32 {
    return this.value6;
  }

  getListAssetType(): i32 {
    return this.value7;
  }

  getPremiumAssetType(): i32 {
    return this.value8;
  }

  getIsListed(): boolean {
    return this.value9;
  }

  getExercised(): boolean {
    return this.value10;
  }
}

export class OpwizFlexible__optionsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }

  getInitiator(): Address {
    return this.value0;
  }

  getParticipant(): Address {
    return this.value1;
  }

  getColleteral(): Address {
    return this.value2;
  }

  getCounterAsset(): Address {
    return this.value3;
  }

  getPremiumAsset(): Address {
    return this.value4;
  }

  getIndexOfColleteral(): BigInt {
    return this.value5;
  }

  getIndexOfCounter(): BigInt {
    return this.value6;
  }

  getIndexOfPremium(): BigInt {
    return this.value7;
  }

  getAmountOfColleteral(): BigInt {
    return this.value8;
  }

  getAmountOfCA(): BigInt {
    return this.value9;
  }

  getPremiumAmount(): BigInt {
    return this.value10;
  }
}

export class OpwizFlexible extends ethereum.SmartContract {
  static bind(address: Address): OpwizFlexible {
    return new OpwizFlexible("OpwizFlexible", address);
  }

  ERC1155_INTERFACE_ID(): Bytes {
    let result = super.call(
      "ERC1155_INTERFACE_ID",
      "ERC1155_INTERFACE_ID():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_ERC1155_INTERFACE_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ERC1155_INTERFACE_ID",
      "ERC1155_INTERFACE_ID():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC721_INTERFACE_ID(): Bytes {
    let result = super.call(
      "ERC721_INTERFACE_ID",
      "ERC721_INTERFACE_ID():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_ERC721_INTERFACE_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ERC721_INTERFACE_ID",
      "ERC721_INTERFACE_ID():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  optionDetails(param0: BigInt): OpwizFlexible__optionDetailsResult {
    let result = super.call(
      "optionDetails",
      "optionDetails(uint256):(address,uint256,uint256,uint256,uint256,uint8,uint8,uint8,uint8,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OpwizFlexible__optionDetailsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toBoolean(),
      result[10].toBoolean()
    );
  }

  try_optionDetails(
    param0: BigInt
  ): ethereum.CallResult<OpwizFlexible__optionDetailsResult> {
    let result = super.tryCall(
      "optionDetails",
      "optionDetails(uint256):(address,uint256,uint256,uint256,uint256,uint8,uint8,uint8,uint8,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpwizFlexible__optionDetailsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toBoolean(),
        value[10].toBoolean()
      )
    );
  }

  options(param0: BigInt): OpwizFlexible__optionsResult {
    let result = super.call(
      "options",
      "options(uint256):(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OpwizFlexible__optionsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_options(
    param0: BigInt
  ): ethereum.CallResult<OpwizFlexible__optionsResult> {
    let result = super.tryCall(
      "options",
      "options(uint256):(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpwizFlexible__optionsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawAllowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "withdrawAllowance",
      "withdrawAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_withdrawAllowance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllowance",
      "withdrawAllowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyOptionCall extends ethereum.Call {
  get inputs(): BuyOptionCall__Inputs {
    return new BuyOptionCall__Inputs(this);
  }

  get outputs(): BuyOptionCall__Outputs {
    return new BuyOptionCall__Outputs(this);
  }
}

export class BuyOptionCall__Inputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyOptionCall__Outputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class DelistOptionCall extends ethereum.Call {
  get inputs(): DelistOptionCall__Inputs {
    return new DelistOptionCall__Inputs(this);
  }

  get outputs(): DelistOptionCall__Outputs {
    return new DelistOptionCall__Outputs(this);
  }
}

export class DelistOptionCall__Inputs {
  _call: DelistOptionCall;

  constructor(call: DelistOptionCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DelistOptionCall__Outputs {
  _call: DelistOptionCall;

  constructor(call: DelistOptionCall) {
    this._call = call;
  }
}

export class ExerciseOptionCall extends ethereum.Call {
  get inputs(): ExerciseOptionCall__Inputs {
    return new ExerciseOptionCall__Inputs(this);
  }

  get outputs(): ExerciseOptionCall__Outputs {
    return new ExerciseOptionCall__Outputs(this);
  }
}

export class ExerciseOptionCall__Inputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExerciseOptionCall__Outputs {
  _call: ExerciseOptionCall;

  constructor(call: ExerciseOptionCall) {
    this._call = call;
  }
}

export class ListOptionCall extends ethereum.Call {
  get inputs(): ListOptionCall__Inputs {
    return new ListOptionCall__Inputs(this);
  }

  get outputs(): ListOptionCall__Outputs {
    return new ListOptionCall__Outputs(this);
  }
}

export class ListOptionCall__Inputs {
  _call: ListOptionCall;

  constructor(call: ListOptionCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get indexOfAsset(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ListOptionCall__Outputs {
  _call: ListOptionCall;

  constructor(call: ListOptionCall) {
    this._call = call;
  }
}

export class OfferOptionCall extends ethereum.Call {
  get inputs(): OfferOptionCall__Inputs {
    return new OfferOptionCall__Inputs(this);
  }

  get outputs(): OfferOptionCall__Outputs {
    return new OfferOptionCall__Outputs(this);
  }
}

export class OfferOptionCall__Inputs {
  _call: OfferOptionCall;

  constructor(call: OfferOptionCall) {
    this._call = call;
  }

  get colleteral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get counterAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get premiumAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get indexOfColleteral(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get indexOfCA(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get indexOfPremium(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class OfferOptionCall__Outputs {
  _call: OfferOptionCall;

  constructor(call: OfferOptionCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ParticipateOptionCall extends ethereum.Call {
  get inputs(): ParticipateOptionCall__Inputs {
    return new ParticipateOptionCall__Inputs(this);
  }

  get outputs(): ParticipateOptionCall__Outputs {
    return new ParticipateOptionCall__Outputs(this);
  }
}

export class ParticipateOptionCall__Inputs {
  _call: ParticipateOptionCall;

  constructor(call: ParticipateOptionCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ParticipateOptionCall__Outputs {
  _call: ParticipateOptionCall;

  constructor(call: ParticipateOptionCall) {
    this._call = call;
  }
}

export class RefundColleteralCall extends ethereum.Call {
  get inputs(): RefundColleteralCall__Inputs {
    return new RefundColleteralCall__Inputs(this);
  }

  get outputs(): RefundColleteralCall__Outputs {
    return new RefundColleteralCall__Outputs(this);
  }
}

export class RefundColleteralCall__Inputs {
  _call: RefundColleteralCall;

  constructor(call: RefundColleteralCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundColleteralCall__Outputs {
  _call: RefundColleteralCall;

  constructor(call: RefundColleteralCall) {
    this._call = call;
  }
}

export class SetOptionParamsCall extends ethereum.Call {
  get inputs(): SetOptionParamsCall__Inputs {
    return new SetOptionParamsCall__Inputs(this);
  }

  get outputs(): SetOptionParamsCall__Outputs {
    return new SetOptionParamsCall__Outputs(this);
  }
}

export class SetOptionParamsCall__Inputs {
  _call: SetOptionParamsCall;

  constructor(call: SetOptionParamsCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOfColleteral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOfCA(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get premiumAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get optionExpiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get offerEnd(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SetOptionParamsCall__Outputs {
  _call: SetOptionParamsCall;

  constructor(call: SetOptionParamsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCACall extends ethereum.Call {
  get inputs(): WithdrawCACall__Inputs {
    return new WithdrawCACall__Inputs(this);
  }

  get outputs(): WithdrawCACall__Outputs {
    return new WithdrawCACall__Outputs(this);
  }
}

export class WithdrawCACall__Inputs {
  _call: WithdrawCACall;

  constructor(call: WithdrawCACall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCACall__Outputs {
  _call: WithdrawCACall;

  constructor(call: WithdrawCACall) {
    this._call = call;
  }
}

export class WithdrawPremiumCall extends ethereum.Call {
  get inputs(): WithdrawPremiumCall__Inputs {
    return new WithdrawPremiumCall__Inputs(this);
  }

  get outputs(): WithdrawPremiumCall__Outputs {
    return new WithdrawPremiumCall__Outputs(this);
  }
}

export class WithdrawPremiumCall__Inputs {
  _call: WithdrawPremiumCall;

  constructor(call: WithdrawPremiumCall) {
    this._call = call;
  }

  get optionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawPremiumCall__Outputs {
  _call: WithdrawPremiumCall;

  constructor(call: WithdrawPremiumCall) {
    this._call = call;
  }
}
